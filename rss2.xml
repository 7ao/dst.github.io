<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    
    <title><![CDATA[7ao 1.0]]></title>
    <link>http://blog.luoyuanhang.com//</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[7ao's blog]]></description>
    <pubDate>Fri, 25 Dec 2015 16:18:02 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title><![CDATA[【从头开始写操作系统系列】页表以及相关的描述符详解]]></title>
      <link>http://blog.luoyuanhang.com/2015/12/26/%E3%80%90%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97%E3%80%91%E9%A1%B5%E8%A1%A8%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9A%84%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%AF%A6%E8%A7%A3/</link>
      <guid>http://blog.luoyuanhang.com/2015/12/26/%E3%80%90%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97%E3%80%91%E9%A1%B5%E8%A1%A8%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9A%84%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%AF%A6%E8%A7%A3/</guid>
      <pubDate>Fri, 25 Dec 2015 16:16:58 GMT</pubDate>
      <description>
      <![CDATA[<blockquote>
<p>在之前的文章中，我们介绍过 GDT（全局描述符表）以及一致代码段和非一致代码段，这篇文章我们再回到描述符，这次我们来以 ARM 架构为例了解一下页表描述符。</p>
</blockquote>
<p>在这篇文章中，我们会看到以下内容：</p>
<ul>
<li><p>页表是什么？</p>
</li>
<li><p>一级页表的地址变换过程</p>
</li>
<li><p>由一级描述符来获取二级描述符或者段地址的过程</p>
</li>
</ul>]]>
      
      </description>
      <content:encoded><![CDATA[<blockquote>
<p>在之前的文章中，我们介绍过 GDT（全局描述符表）以及一致代码段和非一致代码段，这篇文章我们再回到描述符，这次我们来以 ARM 架构为例了解一下页表描述符。</p>
</blockquote>
<p>在这篇文章中，我们会看到以下内容：</p>
<ul>
<li><p>页表是什么？</p>
</li>
<li><p>一级页表的地址变换过程</p>
</li>
<li><p>由一级描述符来获取二级描述符或者段地址的过程</p>
</li>
</ul>
<a id="more"></a>
<h1 id="页表">页表</h1><h2 id="页表是什么？">页表是什么？</h2><p>页表是一种特殊的数据结构，放在系统空间的页表区，存放逻辑页与物理页帧的对应关系。 每一个进程都拥有一个自己的页表，PCB表中有指针指向页表。<br>（来自<a href="http://baike.baidu.com/view/2143270.htm" target="_blank" rel="external">百度百科</a>）</p>
<p>通俗的来讲，页表的内容就是一个描述符（关于描述符的介绍请参看该系列文章中的《实现一个 GDT》），我们可以将 GDT 理解成为一个一级描述符表，将 LDT 理解为一个二级描述符表。这篇文章我将以 ARM 体系结构为例，介绍一级页表的地址变换过程以及根据一级页表的类型来获取二级描述符表或者段的物理地址。</p>
<h2 id="MMU_中的地址变换">MMU 中的地址变换</h2><p>ARM 系统中的虚拟空间到物理存储空间的映射是以内存块为单位进行的，即虚拟内存中的一块连续的空间被映射到物理存储空间一段连续的地址空间。</p>
<p>ARM 支持以下几种大小的存储块：</p>
<ul>
<li>段(Section):大小为1MB</li>
<li>大页(Large Pages):大小为64KB</li>
<li>小页(Small Pages):大小为4KB</li>
<li>微页(Tiny Pages):大小为1KB</li>
</ul>
<p>在页表中，每一个地址变换条目实际上记录了一个虚拟空间的存储块的基地址与物理空间存储块的对应关系，根据存储块的大小，会有多种不同的地址变换。</p>
<p>在 ARM 中，MMU 实现虚拟地址到物理地址的映射是通过两级页表来实现的（以段为单位的地址变换是通过一级页表实现的）</p>
<h2 id="ARM_中与_MMU操作相关的寄存器">ARM 中与 MMU操作相关的寄存器</h2><table>
<thead>
<tr>
<th style="text-align:center">寄存器</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">C1</td>
<td style="text-align:left">配置 MMU 中的一些操作</td>
</tr>
<tr>
<td style="text-align:center">C2</td>
<td style="text-align:left">保存页表的基地址</td>
</tr>
<tr>
<td style="text-align:center">C3</td>
<td style="text-align:left">设置域的访问控制属性</td>
</tr>
<tr>
<td style="text-align:center">C4</td>
<td style="text-align:left">保留</td>
</tr>
<tr>
<td style="text-align:center">C5</td>
<td style="text-align:left">内存访问失效状态指示</td>
</tr>
<tr>
<td style="text-align:center">C6</td>
<td style="text-align:left">内存访问失效时失效的地址</td>
</tr>
<tr>
<td style="text-align:center">C8</td>
<td style="text-align:left">控制与清除 TLB 内容相关操作</td>
</tr>
<tr>
<td style="text-align:center">C10</td>
<td style="text-align:left">控制与锁定 TLB 内容相关操作</td>
</tr>
</tbody>
</table>
<h1 id="一级页表">一级页表</h1><h2 id="如何获得一级页表的地址？">如何获得一级页表的地址？</h2><p>从上表中我们可以看到 C2中保存了页表的基地址，由此，我们可以看到下图：</p>
<p><img src="http://lyhpic-img.stor.sinaapp.com/original/22c6e8672f88eae1541780ec5c842924.png" alt="image"></p>
<p><strong>一级页表地址 =  C2寄存器的高18位 + 虚拟地址的高22位 + 00 （共32位）</strong></p>
<h2 id="一级描述符">一级描述符</h2><p>我们得到了一级页表的地址，对应地址空间的内容就是一级描述符。</p>
<p>一级描述符分为以下类型：</p>
<ul>
<li>粗粒度页表描述符</li>
</ul>
<p><img src="http://lyhpic-img.stor.sinaapp.com/original/384153ed3c113c2ca9212e7653d5c1bb.png" alt="image"></p>
<ul>
<li>段描述符</li>
</ul>
<p><img src="http://lyhpic-img.stor.sinaapp.com/original/5cdff03300e12133aa818f3dddb455e2.png" alt="image"></p>
<ul>
<li>细粒度页表描述符</li>
</ul>
<p><img src="http://lyhpic-img.stor.sinaapp.com/original/29f93ec3a954a76cf51f5d2a884ac046.png" alt="image"></p>
<p>从以上三幅图中我们可以看到，不同类型的描述符是由描述符的<strong>最低2位</strong>决定的，分别为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">低1位</th>
<th style="text-align:center">低0位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">粗粒度页表描述符</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">段描述符</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">细粒度页表描述符</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">无效</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<h1 id="获得二级描述符表或者段地址过程">获得二级描述符表或者段地址过程</h1><h2 id="由粗粒度页表描述符获得二级描述符表">由粗粒度页表描述符获得二级描述符表</h2><p><img src="http://lyhpic-img.stor.sinaapp.com/original/f867ca03e05a58371a62afc1d0c8f414.png" alt="image"></p>
<p>从图中我们可以清楚的看到由粗粒度描述符表得到二级描述符表地址的过程：</p>
<p><strong>二级描述符表地址 = 粗粒度描述符表高22位 + 虚拟地址[19:12]位 + 00 (共32位)</strong></p>
<h2 id="由细粒度页表描述符获得二级描述符表">由细粒度页表描述符获得二级描述符表</h2><p><img src="http://lyhpic-img.stor.sinaapp.com/original/faa3e52d63c9a99048f0cf739a47838a.png" alt="image"></p>
<p>从图中我们可以清楚的看到由细粒度描述符表得到二级描述符表地址的过程：</p>
<p><strong>二级描述符表地址 = 粗粒度描述符表高20位 + 虚拟地址[19:10]位 + 00 (共32位)</strong></p>
<h2 id="由段描述符表描述符获得段的物理地址">由段描述符表描述符获得段的物理地址</h2><p><img src="http://lyhpic-img.stor.sinaapp.com/original/f6696cba74d91fcd34d8be9a4ae24004.png" alt="image"></p>
<p>从图中我们可以清楚的看到由段描述符表描述符获得段的物理地址的过程：</p>
<p><strong>段物理地址 = 段描述符高12位 + 虚拟地址低20位</strong></p>
<h1 id="总结">总结</h1><p>在这篇文章中，我们加深了之前对描述符的理解，同时对描述符的作用做了更直接的解释，对于页表也进行了介绍。这篇文章中我们以 ARM 体系结构为例讲解了二级页表的工作，其实，按照同样的道理我们也可以设计出三级页表以及更多级的页表。</p>
<hr>
<blockquote>
<p>本文的版权归作者 <a href="http://www.luoyuanhang.com" target="_blank" rel="external">7ao</a> 所有，采用 <a href="http://creativecommons.org/licenses/by-nc/3.0/" target="_blank" rel="external">Attribution-NonCommercial 3.0 License</a>。任何人可以进行转载、分享，但不可在未经允许的情况下用于商业用途；转载请注明出处。感谢配合！</p>
</blockquote>
]]></content:encoded>
      <comments>http://blog.luoyuanhang.com/2015/12/26/%E3%80%90%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97%E3%80%91%E9%A1%B5%E8%A1%A8%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9A%84%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%AF%A6%E8%A7%A3/#disqus_comments</comments>
    </item>
    
   
  </channel>
</rss>